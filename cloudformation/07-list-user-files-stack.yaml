AWSTemplateFormatVersion: '2010-09-09'
Description: GET User files API resource, with Lambda handler

Parameters:
  Environment:
    Type: String
  Project:
    Type: String
    Default: bagalyze
  FunctionListUserFilesName:
    Type: String
    Default: list-user-files.zip

Resources:
  ListUserFilesFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join [ "-", [ !Ref AWS::StackName, "list-user-files", !Ref Environment ] ]
      Handler: list_user_files.handler
      Role: !ImportValue LogAndDynamoAccessLambdaRoleArn
      Runtime: python3.11
      Timeout: 10
      Code:
        S3Bucket: !ImportValue LambdaCodeBucket
        S3Key: !Ref FunctionListUserFilesName
      Environment:
        Variables:
          TABLE_NAME: !ImportValue UserFileMetadataTable

  ApiGatewayListUserFilesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !ImportValue ApiGatewayRestApi
      ParentId: !ImportValue ApiGatewayRestApiRootResourceId
      PathPart: files

  ApiGatewayListUserFilesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref ApiGatewayListUserFilesResource
      RestApiId: !ImportValue ApiGatewayRestApi
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !ImportValue ApiAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - Region: !Ref AWS::Region
            LambdaArn: !GetAtt ListUserFilesFunction.Arn
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true

  ApiGatewayListUserFilesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiGatewayListUserFilesResource
      RestApiId: !ImportValue ApiGatewayRestApi
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'http://localhost:4200'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true

  LambdaApiListUserFilesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ListUserFilesFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApiId}/*/GET/files
        - RestApiId: !ImportValue ApiGatewayRestApi