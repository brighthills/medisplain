AWSTemplateFormatVersion: '2010-09-09'
Description: S3 buckets and access

Parameters:
  Environment:
    Type: String
  Project:
    Type: String
    Default: medisplain
  BucketNameUpload:
    Type: String
    Default: uploads

Resources:
  #---S3
  FileUploadBucket:
    Type: AWS::S3::Bucket
    DependsOn: FileUploadQueuePolicy
    Properties:
      BucketName: !Join [ "-", [ !Ref AWS::StackName, !Ref BucketNameUpload, !Ref Environment ] ]
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:Put
            Queue:
              Fn::ImportValue:
                Fn::Sub: FileUploadQueueArn${Environment}

  LambdaCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ["-", [!Ref AWS::StackName, "lambda-code", !Ref Environment]]

  LambdaSecurityBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ "-", [ !Ref AWS::StackName, "security", !Ref Environment ] ]

  # allows all Lambda functions inside the account to retrieve objects from the LambdaCodeBucket
  LambdaCodeBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LambdaCodeBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - s3:GetObject
            Resource: !Sub '${LambdaCodeBucket.Arn}/*'

  LambdaUploadExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [ !Ref AWS::StackName, "lambda-upload-role", !Ref Environment ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3UploadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub '${FileUploadBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'


  FileUploadQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - Fn::ImportValue:
            Fn::Sub: FileUploadQueueRef${Environment}
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: "sqs:SendMessage"
            Resource:
              Fn::ImportValue:
                Fn::Sub: FileUploadQueueArn${Environment}
            Condition:
              ArnLike:
                aws:SourceArn: !Join [ "", [ "arn:aws:s3:::", !Ref AWS::StackName, "-", !Ref BucketNameUpload, "-", !Ref Environment ] ]

Outputs:
  FileUploadBucket:
    Value: !Ref FileUploadBucket
    Export:
      Name: !Sub FileUploadBucket${Environment}
  LambdaCodeBucket:
    Value: !Ref LambdaCodeBucket
    Export:
      Name: !Sub LambdaCodeBucket${Environment}
  LambdaUploadExecutionRole:
    Value: !GetAtt LambdaUploadExecutionRole.Arn
    Export:
      Name: !Sub LambdaUploadExecutionRole${Environment}
  LambdaSecurityBucket:
    Value: !Ref LambdaSecurityBucket
    Export:
      Name: !Sub LambdaSecurityBucket${Environment}