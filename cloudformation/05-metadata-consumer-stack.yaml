AWSTemplateFormatVersion: '2010-09-09'
Description: SQS Lambda consumer, to DynamoDb

Parameters:
  Environment:
    Type: String
  Project:
    Type: String
    Default: bagalyze
  FunctionConsumeName:
    Type: String
    Default: consume-file-metadata.zip
  DynamoMetadataTableName:
    Type: String
    Default: user-file-metadata

Resources:
  FileMetadataConsumerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3DynamoAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoMetadataTableName}"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:HeadObject
                Resource: !Sub
                  - "arn:aws:s3:::${BucketName}/*"
                  - BucketName: !ImportValue FileUploadBucket
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !ImportValue FileUploadQueueArn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !ImportValue FileUploadDeadLetterQueueArn

  FileMetadataConsumerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-function-${Environment}"
      Handler: consume_file_metadata.handler
      Role: !GetAtt FileMetadataConsumerRole.Arn
      Runtime: python3.11
      Timeout: 15
      Code:
        S3Bucket: !ImportValue LambdaCodeBucket
        S3Key: !Ref FunctionConsumeName
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoMetadataTableName
      # AWS bypasses the SQS RedrivePolicy when Lambda is the consumer and uses the DeadLetterConfig property instead.
      DeadLetterConfig:
        TargetArn: !ImportValue FileUploadDeadLetterQueueArn

  FileUploadQueueEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !ImportValue FileUploadQueueArn
      FunctionName: !Ref FileMetadataConsumerFunction
      Enabled: true