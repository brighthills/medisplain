AWSTemplateFormatVersion: '2010-09-09'
Description: Restricted Cognito User pool, ApiGateway, Lambda upload function

Parameters:
  Environment:
    Type: String
  Project:
    Type: String
    Default: bagalyze
  FunctionUploadName:
    Type: String
    Default: upload-image-handler.zip
  FunctionPersistUserName:
    Type: String
    Default: persist-user-info.zip

Resources:
#---Cognito
  RestrictedUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      LambdaConfig:
        PreSignUp: !GetAtt PreSignupLambda.Arn
      UserPoolName: RestrictedUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailMessage: "Hello {username} ! You have been invited to participate in 'bagalyze' dev stage development phase. Your temporary password is {####}"
          EmailSubject: "Welcome to the system"
        UnusedAccountValidityDays: 7
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  RestrictedUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: RestrictedUserPool
    Properties:
      ClientName: restricted-client
      UserPoolId: !Ref RestrictedUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH

  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    DependsOn: RestrictedUserPool
    Properties:
      GroupName: Admins
      UserPoolId: !Ref RestrictedUserPool
      Description: Admin group for pre-approved users

#---Lambda
  UploadImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [!Ref AWS::StackName, "function-upload-image", !Ref Environment]]
      Handler: upload_handler.handler
      Role: !ImportValue LambdaUploadExecutionRole
      Runtime: python3.11
      Timeout: 10
      Code:
        S3Bucket: !ImportValue LambdaCodeBucket
        S3Key: !Ref FunctionUploadName
      Environment:
        Variables:
          BUCKET_NAME: !ImportValue ImageUploadBucket

  LambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UploadImageFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/upload'

  PreSignupLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PreSignupLambda
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${RestrictedUserPool}

  PreSignupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: WriteToDynamo
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt UserImageMetadataTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  PreSignupLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join [ "-", [ !Ref AWS::StackName, "function-persist-user", !Ref Environment ] ]
      Handler: persist_user_info.handler
      Role: !GetAtt PreSignupLambdaRole.Arn
      Runtime: python3.11
      Timeout: 10
      Code:
        S3Bucket: !ImportValue LambdaCodeBucket
        S3Key: !Ref FunctionPersistUserName
      Environment:
        Variables:
          TABLE_NAME: !Ref UserImageMetadataTable

#--- API Gateway
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-api'

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: upload

  ApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ApiGatewayRestApi
      ProviderARNs:
        - !GetAtt RestrictedUserPool.Arn

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: ApiAuthorizer
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - Region: !Ref AWS::Region
            LambdaArn: !GetAtt UploadImageFunction.Arn

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref Environment

  #---DynamoDb
  #    use cases:
  #       - retrieve one user metadata --> pk: user@example.com sk: info data: { userId, email, createdAt }
  #           GetItem where:
  #             PK = user@example.com
  #             SK = info
  #       - retrieve one image by user --> pk: user@example.com sk: image#vacation1.jpg data: { filename, userEmail, userId, uploadTimestamp, createdAt }
  #           GetItem where:
  #             PK = user@example.com
  #             SK = image#vacation1.jpg
  #       - retrieve many images by user
  #           Query where:
  #             PK = user@example.com
  #             SK begins_with image#
  #    pros for design:
  #      - scales with user and image volume
  #      - simple, consistent pattern
  #      - one table for everything = cost-effective, easy to maintain
  #      - SK values allow type separation (info, image#..., etc.)
  UserImageMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: user-image-metadata
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE

Outputs:
  UploadImageFunction:
    Value: !Ref UploadImageFunction
    Export:
      Name: UploadImageFunction
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/upload'
    Export:
      Name: ApiEndpoint
  ApiGatewayRestApi:
    Value: !Ref ApiGatewayRestApi
    Export:
      Name: ApiGatewayRestApi
