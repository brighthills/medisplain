AWSTemplateFormatVersion: '2010-09-09'
Description: Restricted Cognito User pool, ApiGateway, Lambda upload function

Parameters:
  Environment:
    Type: String
  Project:
    Type: String
    Default: bagalyze
  FunctionUploadName:
    Type: String
    Default: upload-file-handler.zip
  FunctionPersistUserName:
    Type: String
    Default: persist-user-info.zip
  DynamoMetadataTableName:
    Type: String
    Default: user-file-metadata

Resources:
#---Cognito
  RestrictedUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      LambdaConfig:
        PreSignUp: !GetAtt PreSignupLambda.Arn
      UserPoolName: RestrictedUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailMessage: "Hello {username} ! You have been invited to participate in 'bagalyze' dev stage development phase. Your temporary password is {####}"
          EmailSubject: "Welcome to the system"
        UnusedAccountValidityDays: 7
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  RestrictedUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    DependsOn: RestrictedUserPool
    Properties:
      Domain: bagalyze
      UserPoolId: !Ref RestrictedUserPool

  RestrictedUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: RestrictedUserPool
    Properties:
      ClientName: restricted-client
      UserPoolId: !Ref RestrictedUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - https://localhost:4200/callback
      LogoutURLs:
        - https://localhost:4200/logout
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true

  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    DependsOn: RestrictedUserPool
    Properties:
      GroupName: Admins
      UserPoolId: !Ref RestrictedUserPool
      Description: Admin group for pre-approved users

#---Lambda
  UploadFileFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [!Ref AWS::StackName, "function-upload-file", !Ref Environment]]
      Handler: upload_handler.handler
      Role: !ImportValue LambdaUploadExecutionRole
      Runtime: python3.11
      Timeout: 10
      Code:
        S3Bucket: !ImportValue LambdaCodeBucket
        S3Key: !Ref FunctionUploadName
      Environment:
        Variables:
          BUCKET_NAME: !ImportValue FileUploadBucket

  LambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UploadFileFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/upload'

  PreSignupLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PreSignupLambda
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${RestrictedUserPool}

  PreSignupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: WriteToDynamo
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt UserFileMetadataTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  PreSignupLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join [ "-", [ !Ref AWS::StackName, "function-persist-user", !Ref Environment ] ]
      Handler: persist_user_info.handler
      Role: !GetAtt PreSignupLambdaRole.Arn
      Runtime: python3.11
      Timeout: 10
      Code:
        S3Bucket: !ImportValue LambdaCodeBucket
        S3Key: !Ref FunctionPersistUserName
      Environment:
        Variables:
          TABLE_NAME: !Ref UserFileMetadataTable

#--- API Gateway
  #enables API Gateway logs to be tracked in CloudWatch
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: apigateway-cloudwatch-logs-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayPushToCloudWatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: "*"

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-api'

  ApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ApiGatewayRestApi
      ProviderARNs:
        - !GetAtt RestrictedUserPool.Arn
      AuthorizerResultTtlInSeconds: 300

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: upload

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: ApiAuthorizer
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - Region: !Ref AWS::Region
            LambdaArn: !GetAtt UploadFileFunction.Arn
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true

  ApiGatewayOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Origin: "'http://localhost:4200'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true

  ApiGatewayGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResponseType: UNAUTHORIZED
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'http://localhost:4200'"
        gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
      StatusCode: '401'
      ResponseTemplates:
        application/json: '{"message": "Unauthorized"}'

  ApiGatewayGatewayResponseAccessDenied:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResponseType: ACCESS_DENIED
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'http://localhost:4200'"
        gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
      StatusCode: '403'
      ResponseTemplates:
        application/json: '{"message": "Access denied"}'

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethod
      - ApiGatewayAccount
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref Environment
      StageDescription:
        MethodSettings:
          - ResourcePath: "/*"
            HttpMethod: "*"
            LoggingLevel: INFO
            DataTraceEnabled: true
            MetricsEnabled: true
        AccessLogSetting:
          DestinationArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/${AWS::StackName}-access-logs
          Format: '{ "requestId":"$context.requestId", "ip":"$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }'

  ApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-access-logs
      RetentionInDays: 7

  #---DynamoDb
  #    use cases:
  #       - retrieve one user metadata --> pk: user@example.com sk: info data: { userId, email, createdAt }
  #           GetItem where:
  #             PK = user@example.com
  #             SK = info
  #       - retrieve one file by user --> pk: user@example.com sk: file#image#vacation1.jpg data: { filename, userEmail, userId, uploadTimestamp, createdAt }
  #           GetItem where:
  #             PK = user@example.com
  #             SK = file#image#vacation1.jpg
  #       - retrieve many files by user
  #           Query where:
  #             PK = user@example.com
  #             SK begins_with file#image#
  #    pros for design:
  #      - scales with user and file volume
  #      - simple, consistent pattern
  #      - one table for everything = cost-effective, easy to maintain
  #      - SK values allow type separation (info, file#image#..., etc.)
  UserFileMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoMetadataTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE

Outputs:
  UploadFileFunction:
    Value: !Ref UploadFileFunction
    Export:
      Name: UploadFileFunction
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/upload'
    Export:
      Name: ApiEndpoint
  ApiGatewayRestApi:
    Value: !Ref ApiGatewayRestApi
    Export:
      Name: ApiGatewayRestApi
  ApiGatewayRestApiRootResourceId:
    Value: !GetAtt ApiGatewayRestApi.RootResourceId
    Export:
      Name: ApiGatewayRestApiRootResourceId
  UserFileMetadataTable:
    Value: !Ref UserFileMetadataTable
    Export:
      Name: UserFileMetadataTable
  ApiAuthorizer:
    Value: !Ref ApiAuthorizer
    Export:
      Name: ApiAuthorizer
  UserFileMetadataTableArn:
    Value: !GetAtt UserFileMetadataTable.Arn
    Export:
      Name: UserFileMetadataTableArn