AWSTemplateFormatVersion: '2010-09-09'
Description: Create SecretsManager secret from an S3 PEM file (CloudFront Private Key) and OpenAI api key

Parameters:
  Project:
    Type: String
    Default: medisplain
  Environment:
    Type: String
  SecretName:
    Type: String
    Default: cloudfront-private-key
  S3Key:
    Type: String
    Description: S3 key (path) to the PEM file
    Default: rsa/cloudfront-private-key.pem
  FunctionSecretCreatorKey:
    Type: String
    Default: secret-creator.zip
  OpenAISecretName:
    Type: String
    Default: /medisplain/openai-apikey
  OpenAISecretString:
    Type: String

Resources:
  CustomSecretCreatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-function-${Environment}"
      Handler: secret_creator.handler
      Role: !GetAtt CustomSecretCreatorFunctionRole.Arn
      Runtime: python3.11
      Timeout: 30
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: LambdaCodeBucket${Environment}
        S3Key: !Ref FunctionSecretCreatorKey
      Environment:
        Variables:
          BUCKET_NAME:
            Fn::ImportValue:
              Fn::Sub: LambdaSecurityBucket${Environment}
          S3_KEY: !Ref S3Key
          SECRET_NAME: !Ref SecretName

  CustomSecretCreatorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-function-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${Project}-secret-create-access-${Environment}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:CreateSecret
                  - secretsmanager:PutSecretValue
                  - secretsmanager:UpdateSecret
                  - secretsmanager:DescribeSecret
                  - secretsmanager:GetSecretValue
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub
                  - "arn:aws:s3:::${S3Bucket}/${S3Key}"
                  - S3Bucket:
                      Fn::ImportValue:
                        Fn::Sub: LambdaSecurityBucket${Environment}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  CustomSecretCreator:
    Type: Custom::CreateCloudFrontSecret
    DependsOn:
      - CustomSecretCreatorFunction
    Properties:
      ServiceToken: !GetAtt CustomSecretCreatorFunction.Arn
      SecretName: !Ref SecretName
      S3Bucket:
        Fn::ImportValue:
          Fn::Sub: LambdaSecurityBucket${Environment}
      S3Key: !Ref S3Key

  OpenAIAPIKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:  !Ref OpenAISecretName
      SecretString: !Ref OpenAISecretString

Outputs:
  OpenAIApiKeySecretRef:
    Value: !Ref OpenAIAPIKeySecret
    Export:
      Name: !Sub OpenAIApiKeySecretRef${Environment}